package com.ischoolbar.programmer.controller.admin;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.ischoolbar.programmer.entity.admin.News;
import com.ischoolbar.programmer.entity.teacher.Department;
import com.ischoolbar.programmer.entity.teacher.Teacher;
import com.ischoolbar.programmer.page.admin.Page;
import com.ischoolbar.programmer.service.teacher.AcademyService;
import com.ischoolbar.programmer.service.teacher.DepartmentService;
import com.ischoolbar.programmer.service.teacher.TeacherService;

@RequestMapping("/admin/teacher")
@Controller
public class TeacherController {
	@Autowired
	private AcademyService academyService;
	@Autowired
	private DepartmentService departmentService;
	@Autowired
	private TeacherService teacherService;
	
	/**
	 * 导师信息列表页面
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/list",method=RequestMethod.GET)
	public ModelAndView teacherList(ModelAndView model){
		model.addObject("academyList", academyService.findAll());
		model.addObject("departmentList", departmentService.findAll());
		model.setViewName("teacher/list");
		return model;
	}
	/**
	 * 获取导师列表
	 * @param page
	 * @param departmentName
	 * @return
	 */
	@RequestMapping(value="/list",method=RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> getDepartmentList(Page page,
			@RequestParam(name="departmentName",required=false,defaultValue="") String departmentName,
			@RequestParam(name="academyName",required=false,defaultValue="") String academyName
			){
		Map<String, Object> ret = new HashMap<String, Object>();
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("offset", page.getOffset());
		queryMap.put("pageSize", page.getRows());
		queryMap.put("academyName", academyName);
		queryMap.put("departmentName", departmentName);
		List<Department> findList = departmentService.findList(queryMap);
		ret.put("rows", findList);
		ret.put("total", academyService.getTotal(queryMap));
		return ret;
	}
	/**
	 * 导师添加
	 * @param academy
	 * @return
	 */
	@RequestMapping(value="/add",method=RequestMethod.POST)
	@ResponseBody
	public Map<String, String> add(Department department){
		Map<String, String> ret = new HashMap<String, String>();
		if(department == null){
			ret.put("type", "error");
			ret.put("msg", "请填写正确的专业信息!");
			return ret;
		}
		if(StringUtils.isEmpty(department.getDepartmentName())){
			ret.put("type", "error");
			ret.put("msg", "请填写专业名称!");
			return ret;
		}
		if(departmentService.add(department) <= 0){
			ret.put("type", "error");
			ret.put("msg", "添加失败，请联系管理员!");
			return ret;
		}
		ret.put("type", "success");
		ret.put("msg", "添加成功!");
		return ret;
	}
	
	/**
	 * 导师编辑页面
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/edit",method=RequestMethod.GET)
	public ModelAndView edit(ModelAndView model,Long id){
		model.addObject("academyList", academyService.findAll());
		model.addObject("departmentList", departmentService.findAll());
		model.addObject("teacher", teacherService.find(id));
		model.setViewName("teacher/edit");
		return model;
	}
	
	/**
	 * 导师信息编辑
	 * @param teacher
	 * @return
	 */
	@RequestMapping(value="/edit",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,String> edit(Teacher teacher){
		Map<String,String> ret = new HashMap<String, String>();
		if(teacher == null){
			ret.put("type", "error");
			ret.put("msg", "请填写正确的信息！");
			return ret;
		}
		if(StringUtils.isEmpty(teacher.getTercherName())){
			ret.put("type", "error");
			ret.put("msg", "导师姓名不能为空！");
			return ret;
		}
		if(teacher.getAcademyId() == null){
			ret.put("type", "error");
			ret.put("msg", "请选择学院！");
			return ret;
		}
		if(teacher.getDepartmentId() == null){
			ret.put("type", "error");
			ret.put("msg", "专业不能为空！");
			return ret;
		}
		if(StringUtils.isEmpty(teacher.getInformation())){
			ret.put("type", "error");
			ret.put("msg", "导师信息不能为空！");
			return ret;
		}
		if(teacherService.edit(teacher) <= 0){
			ret.put("type", "error");
			ret.put("msg", "修改失败，请联系管理员！");
			return ret;
		}
		ret.put("type", "success");
		ret.put("msg", "修改成功！");
		return ret;
	}
	
	/**
	 * 删除导师信息
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/delete",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,String> delete(Long id){
		Map<String,String> ret = new HashMap<String, String>();
		if(id == null){
			ret.put("type", "error");
			ret.put("msg", "请选择要删除的导师信息！");
			return ret;
		}
		if(departmentService.delete(id) <= 0){
			ret.put("type", "error");
			ret.put("msg", "导师删除失败，请联系管理员！");
			return ret;
		}
		ret.put("type", "success");
		ret.put("msg", "删除成功！");
		return ret;
	}
}
